50 , 1 , 1 , 0.000000
49 , 1 , 1 , 0.000000
48 , 1 , 1 , 0.000000
47 , 1 , 1 , 0.000000
46 , 1 , 1 , 0.000000
45 , 1 , 1 , 0.000000
44 , 1 , 1 , 0.000000
43 , 1 , 1 , 0.000000
42 , 1 , 1 , 0.000000
41 , 1 , 1 , 0.000000
40 , 1 , 1 , 0.000000
39 , 1 , 1 , 0.000000
38 , 1 , 1 , 0.000000
37 , 1 , 1 , 0.000000
36 , 1 , 1 , 0.000000
35.00000035.00000035.00000035.00000035.00000035.00000035.00000035.00000035.00000
035.00000035.00000035.00000035.00000035.00000035.00000035.00000035.00000035 , 14
 , 31 , 0.936500
34 , 3 , 3 , 0.878143
33 , 3 , 3 , 0.824378
32 , 3 , 3 , 0.774727
31 , 3 , 3 , 0.728776
30 , 3 , 3 , 0.686161
29 , 3 , 3 , 0.646567
28 , 3 , 3 , 0.609714
27 , 3 , 3 , 0.575356
26 , 3 , 3 , 0.543275
25 , 3 , 3 , 0.513278
24 , 3 , 3 , 0.485194
23 , 3 , 3 , 0.458868
22 , 3 , 3 , 0.434163
21 , 3 , 3 , 0.410954
20 , 3 , 3 , 0.389131
19 , 2 , 2 , 0.368592
18 , 2 , 2 , 0.349247
17 , 2 , 2 , 0.331011
16 , 2 , 2 , 0.313810
15 , 2 , 2 , 0.297573
14 , 2 , 2 , 0.282239
13 , 2 , 2 , 0.267750
12 , 2 , 2 , 0.254051
11 , 2 , 2 , 0.241093
10 , 2 , 2 , 0.228832
9 , 2 , 2 , 0.217225
8 , 2 , 2 , 0.206234
7 , 2 , 2 , 0.195823
6 , 2 , 2 , 0.185957
5 , 2 , 2 , 0.176606
4 , 2 , 2 , 0.167740
3 , 2 , 2 , 0.159333
2 , 2 , 2 , 0.151359
1 , 2 , 2 , 0.143795

policy: 1, year: 49,steps_taken: 1, calcs_done: 1
policy: 1, year: 48,steps_taken: 1, calcs_done: 1
policy: 1, year: 47,steps_taken: 1, calcs_done: 1
policy: 1, year: 46,steps_taken: 1, calcs_done: 1
policy: 1, year: 45,steps_taken: 1, calcs_done: 1
policy: 1, year: 44,steps_taken: 1, calcs_done: 1
policy: 1, year: 43,steps_taken: 1, calcs_done: 1
policy: 1, year: 42,steps_taken: 1, calcs_done: 1
policy: 1, year: 41,steps_taken: 1, calcs_done: 1
policy: 1, year: 40,steps_taken: 1, calcs_done: 1
policy: 1, year: 39,steps_taken: 1, calcs_done: 1
policy: 1, year: 38,steps_taken: 1, calcs_done: 1
policy: 1, year: 37,steps_taken: 1, calcs_done: 1
policy: 1, year: 36,steps_taken: 1, calcs_done: 1
policy: 1, year: 35,steps_taken: 1, calcs_done: 1
policy: 1, year: 34,steps_taken: 14, calcs_done: 31
policy: 1, year: 33,steps_taken: 3, calcs_done: 3
policy: 1, year: 32,steps_taken: 3, calcs_done: 3
policy: 1, year: 31,steps_taken: 3, calcs_done: 3
policy: 1, year: 30,steps_taken: 3, calcs_done: 3
policy: 1, year: 29,steps_taken: 3, calcs_done: 3
policy: 1, year: 28,steps_taken: 3, calcs_done: 3
policy: 1, year: 27,steps_taken: 3, calcs_done: 3
policy: 1, year: 26,steps_taken: 3, calcs_done: 3
policy: 1, year: 25,steps_taken: 3, calcs_done: 3
policy: 1, year: 24,steps_taken: 3, calcs_done: 3
policy: 1, year: 23,steps_taken: 3, calcs_done: 3
policy: 1, year: 22,steps_taken: 3, calcs_done: 3
policy: 1, year: 21,steps_taken: 3, calcs_done: 3
policy: 1, year: 20,steps_taken: 3, calcs_done: 3
policy: 1, year: 19,steps_taken: 3, calcs_done: 3
policy: 1, year: 18,steps_taken: 2, calcs_done: 2
policy: 1, year: 17,steps_taken: 2, calcs_done: 2
policy: 1, year: 16,steps_taken: 2, calcs_done: 2
policy: 1, year: 15,steps_taken: 2, calcs_done: 2
policy: 1, year: 14,steps_taken: 2, calcs_done: 2
policy: 1, year: 13,steps_taken: 2, calcs_done: 2
policy: 1, year: 12,steps_taken: 2, calcs_done: 2
policy: 1, year: 11,steps_taken: 2, calcs_done: 2
policy: 1, year: 10,steps_taken: 2, calcs_done: 2
policy: 1, year: 9,steps_taken: 2, calcs_done: 2
policy: 1, year: 8,steps_taken: 2, calcs_done: 2
policy: 1, year: 7,steps_taken: 2, calcs_done: 2
policy: 1, year: 6,steps_taken: 2, calcs_done: 2
policy: 1, year: 5,steps_taken: 2, calcs_done: 2
policy: 1, year: 4,steps_taken: 2, calcs_done: 2
policy: 1, year: 3,steps_taken: 2, calcs_done: 2
policy: 1, year: 2,steps_taken: 2, calcs_done: 2
policy: 1, year: 1,steps_taken: 2, calcs_done: 2
policy: 1, year: 0,steps_taken: 2, calcs_done: 2


// BACK to doubles.

float = double
f
FloatEpsilon...
__powf

//

Rentesats konservativ - overvurdering. 0 coupon obligationer.

Arbejdsprocess = Analyse.. Valg der er truffet.

Finanstilsyn kan godt lide linear interpolerition: Bestemt ved love.

Rentekurver: Forsøg med 0.05% returneret.

Rt: lineær interpolertion.
Beregning: 
yield_curve: Diskoterings satser.

Instantanious forward rate.


Doubles..?

/************* MEETING *********/
Programmering:
	Sørg for at KPS reelt fungere.

	Tests af præcision.
	Der står rigtige resultater i FORTRAN koderne.

Noter til rapport:

Man må gerne overvurdere forsikringsselskabets forpligtelser.
En ulempe ved RKF45 er at man ikke kan forinterpolere.

Arbejdet med RKF45 er en puzzlebrik i Actulus projektet.

P(A-V)<=0.5%

V: Finanstilsynets rentekurver + Brown’s støj

De nuværende forsikringsselskabers beregninger:
- Regner på ikke numeriske-løsninger	
- tager ikke højde for, at man kan gå fra INVALID til ALIVE (Cyclisk beregning)
- Regner med at kundernes policies er uafhængige. -> Det giver dem større krav.

Næste skridt:
0)  Brug RIGTIGE tal fra fortran implementation, og sikre sig at koden virker
    rigtigt

    PureEndowment                   0.14379469738
    DeferredTemporaryLifeAnnuity    1.0265607675
    TemporaryLifeAnnuityPremium     -15.971767666
    TermInsurance                   0.057616919318
    DisabilityAnnuity               0.55552610797, 15.971767666
    DisabilityTermInsurance         0.071418699003, 0.000000000

1)	Customers skal kunne have flere policies
    sol1: split multi-customer in more customers
    sol2: solve customers in seq (bad for sorting)
2)	Rentekurver på kunder

0.3016580290818680
2.3671638801343900
-21.1577071399369000
0.0883805171364136
0.9311483673443270
0.1164113969853670

    a.	Optimer søgning i rentekurve interpolation
    b.	Eventuelt udnytte cuda textures ved interpolation?
    
3)	Lav støj med Brown, og regn på mange rentekurver for hver customer

Stop ved helår er godt for rentekurver. 

/************** TODO NEXT *************/

  NOTES:
  - 124 registers per thread.

Staged concurrent copy and execute, look up, kunne være spændende.

/************* Møde ******************/

  rel og abs error vigtigt at forstå godt.

  RAPPORT: Arbejdsprocess: Cuda, process, hvorfor fejl?
  float.
  Vigtige pointer.

  Processafsnit.

/************** QUESTIONS *************/
VEJLEDER:

Bedre testing? Forslag?

Test af interest rates:
A: 19749,19722
B: 15877,15852
C: 19289,19259


y_diff (gammel yp) er previous_d_diff. Er det en fejl? Stemmer ikke overens.
med udregninger.

Hypoteser:
  - 0       | Large numbers problem? Find by unittesting.z
  - 1. NEJ  | KLS: memory access. GLOBAL MEMORY!
  - 2. JA: 2500/1000   | Det vigtigt at søge for at ting der ligger sammen. Sortering?
  - 3. NEJ  | Sorter efter sammme alder inden for hvert produkt.
  - 4. NEJ  | Lowest common demonimator betyder noget.
  - 5. JA  1000/500 | __powf vs powf __ = fast math

  - 6. VENT | //stepsize scales ned ved years afslutninger
  - 7. VENT |  Betyder y_diff noget?
  


/************** HACK SETUP **************/

/*********** FLOAT CONVERTION **********/

:%s/\.\d\+/\="".submatch(0)."f"/gc

double -> float
Math.Pow -> (float) Math.Pow
Math.Log -> (float) Math.Log

pow -> powf
fabs -> fabsf

/************** WORKFLOW ***************/
Workflow:
Start of the day:
  Check todo file.
  
Regularly:
  git status
  git add .
  git commit -m DESCRIPTION

End of the day:
  Write down the next moves, and status in the todo file.

/************** GIT COMMANDS ***********/
Undo working changes:
  git stash save --keep-index

Checkout and create new branch
  git checkout -b NAME

Merge:
  git merge TO GET

Git add all:
  git add .

Undo commit (no files or index changes)
git reset --soft HEAD~1
/************ FOR THE REPORT ***********/

     * y er startværdi(erne)
     * y_diff er k1, og f1..5 er det samme som k2..5, dog uden at have ganget med stepsize
     * Altså:
     * k1 = y_diff * stepsize
     * k2..6 = f1..5 * stepsize
     *
     * Da funktionerne skal bruge k2..5, ganger vi med stepsize. (i praksis lcd_stepsize)
     * lcd_stepsize is the lowest diffential of stepsize. Det er praktisk at man ikke skal gange med så store tal.
